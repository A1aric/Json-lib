/*
 * Copyright 2006-2016 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import java.text.SimpleDateFormat

buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.6.3'
        classpath 'nl.javadude.gradle.plugins:license-gradle-plugin:0.11.0'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.6'
        classpath 'org.ajoberstar:gradle-git:1.3.2'
        classpath 'org.kordamp.gradle:stats-gradle-plugin:0.1.5'
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.12.0'
        classpath 'org.kordamp.gradle:clirr-gradle-plugin:0.2.3'
        classpath 'net.nemerosa:versioning:1.7.0'
    }
}

apply plugin: 'jacoco'
apply plugin: 'org.ajoberstar.github-pages'
apply plugin: 'com.github.kt3k.coveralls'

jacoco {
    toolVersion = jacocoVersion
}

boolean travis   = (System.env['TRAVIS'] ?: false) as boolean
boolean appveyor = (System.env['APPVEYOR'] ?: false) as boolean
Date buildTimeAndDate = new Date()
ext {
    buildDate = new SimpleDateFormat('yyyy-MM-dd').format(buildTimeAndDate)
    buildTime = new SimpleDateFormat('HH:mm:ss.SSSZ').format(buildTimeAndDate)
    projectsWithCoverage = []
    projectsWithClirr = []
    fullBuild = !travis && !appveyor
}

allprojects {
    apply plugin: 'base'
    apply plugin: 'idea'
    apply plugin: 'com.github.ben-manes.versions'
    apply plugin: 'org.kordamp.gradle.stats'

    repositories {
        jcenter()
    }

    if (JavaVersion.current().isJava8Compatible()) {
        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
}

idea {
    project {
        jdkName "1.5"
        languageLevel "1.5"

        ipr {
            withXml { provider ->
                def node = provider.asNode()
                node.component.find { it.'@name' == 'VcsDirectoryMappings' }?.mapping[0].'@vcs' = 'Git'

                def compilerConfiguration = node.component.find { it.'@name' == 'CompilerConfiguration' }
                compilerConfiguration.remove(compilerConfiguration.annotationProcessing)
                compilerConfiguration.append(new XmlParser().parseText("""
    <annotationProcessing>
      <profile default="true" name="Default" enabled="true">
        <processorPath useClasspath="true" />
      </profile>
    </annotationProcessing>"""))
            }
        }
    }
}

subprojects { subproj ->
    repositories {
        jcenter()
    }

    if (subproj.name.contains('json')) {
        apply plugin: 'java'
        apply from: rootProject.file('gradle/code-coverage.gradle')
        apply from: rootProject.file('gradle/code-quality.gradle')

        subproj.tasks.withType(JavaCompile) {
            sourceCompatibility = subproj.sourceCompatibility
            targetCompatibility = subproj.targetCompatibility
        }

        apply from: rootProject.file('gradle/publishing.gradle')

        subproj.apply plugin: 'org.kordamp.gradle.clirr'

        subproj.clirr {
            failOnErrors = false
            enabled = false
        }

        projectsWithClirr << subproj
        projectsWithCoverage << subproj

        javadoc {
            excludes = ['**/*.html', 'META-INF/**']

            options.use         = true
            options.splitIndex  = true
            options.encoding    = 'UTF-8'
            options.author      = true
            options.version     = true
            options.windowTitle = "$project.name $project.version API"
            options.docTitle    = "$project.name $project.version API"
            options.links       = ['http://docs.oracle.com/javase/8/docs/api/',
                                   'http://docs.oracle.com/javase/8/javafx/api/']
        }

        task sourcesJar(type: Jar) {
            group 'Build'
            description 'An archive of the source code'
            classifier 'sources'
            from sourceSets.main.allSource
        }

        task javadocJar(type: Jar) {
            group 'Build'
            description 'An archive of the javadoc'
            classifier 'javadoc'
            from javadoc.destinationDir
        }

        jar.finalizedBy sourcesJar
        jar.finalizedBy javadocJar

        artifacts {
            sourcesJar
            javadocJar
        }

        test {
            testLogging {
                afterSuite { desc, result ->
                    if (!desc.parent) {
                        println "Test results ${project.name}: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} passed, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped)"
                    }
                }
            }
        }
    }
}

evaluationDependsOnChildren()

if (!project.hasProperty('githubUsername')) ext.githubUsername = ''
if (!project.hasProperty('githubPassword')) ext.githubPassword = ''

githubPages {
    repoUri = project.project_scm
    pages {
        from project(':guide').guide.outputs.files
    }

    credentials {
        username = githubUsername
        password = githubPassword
    }
}

publishGhPages.dependsOn(project(':guide').guide)

coveralls {
    sourceDirs = files(projectsWithCoverage.sourceSets.main.allSource.srcDirs).files.absolutePath
}

task jacocoRootReport(type: org.gradle.testing.jacoco.tasks.JacocoReport) {
    dependsOn = projectsWithCoverage.test
    group = "Reporting"
    description = "Aggregate Jacoco coverage reports."
    additionalSourceDirs = files(projectsWithCoverage.sourceSets.main.allSource.srcDirs)
    sourceDirectories = files(projectsWithCoverage .sourceSets.main.allSource.srcDirs)
    classDirectories = files(projectsWithCoverage.sourceSets.main.output)
    executionData = files(projectsWithCoverage.jacocoTestReport.executionData)
    reports {
        html.enabled = true
        xml.enabled = true
        csv.enabled = false
        html.destination = "${buildDir}/reports/jacoco/test/html"
        xml.destination = "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
    }
}

task clirrRootReport(type: org.kordamp.gradle.clirr.ClirrReportTask) {
    dependsOn = projectsWithClirr.tasks.clirr
    reports = files(projectsWithClirr.findAll{ it.extensions.clirr.enabled }.tasks.clirr.xmlReport)
}
